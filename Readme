E-Commerce Test Automation Framework

A comprehensive Selenium WebDriver test automation framework for e-commerce testing, featuring data-driven testing, parallel execution, and robust reporting.

Overview

This framework automates key end-to-end scenarios for an e-commerce demo site:

User login and authentication

Product selection and cart management

Discount code validation and calculation

Complete checkout process with billing details

Order tracking in user account

Test Scenarios
Test Case 1 – Discount Validation

Login with registered user

Add clothing item to cart

Apply discount coupon (15% or 25%)

Verify discount calculation and totals

Test Case 2 – Checkout Process

Add product with discount

Complete checkout with billing info

Capture and verify order number

Confirm order in account history

Features

Page Object Model (POM) for clean test structure

Data-Driven Testing (CSV, inline, method sources)

JUnit 5 Dynamic Tests

Allure Reporting with screenshots & logs

Configurable Browsers (Chrome, Firefox, headless)

Parallel Test Execution (JUnit 5 config)

Robust error handling & cleanup

Project Structure
src/test/java/com/_2itesting/tests/
├── basetest/        # Setup & teardown
├── config/          # TestConfig
├── data/            # Static & CSV data providers
├── pomClasses/      # Page Objects
├── Utils/           # Helpers, waits, money utils, reporting
├── TestProject.java # Parameterized tests
├── DrivenTests.java # CSV-driven tests
└── DynamicTests.java# Dynamic test generation

src/test/resources/
├── test-config.properties
├── test-data.csv
└── junit-platform.properties

Prerequisites

Java 11+

Maven 3.6+

Chrome/Firefox installed

WebDriver binaries (via WebDriverManager)

Setup

Clone repo

git clone <repo-url>
cd e-commerce-test-automation


Install dependencies

mvn clean install


Update src/test/resources/test-config.properties:

base.url=https://www.edgewordstraining.co.uk/demo-site
default.username=your@email.com
default.password=yourpassword


Create test account manually on the demo site.

Running Tests

Run all tests:

mvn test


Specific test class:

mvn test -Dtest=TestProject


Browser selection:

mvn test -Dbrowser=chrome
mvn test -Dbrowser=firefox


Parallel execution (edit junit-platform.properties):

junit.jupiter.execution.parallel.enabled=true
junit.jupiter.execution.parallel.mode.default=concurrent

Reporting

Generate Allure report:

mvn allure:report


Serve report locally:

mvn allure:serve


Attachments include screenshots, page sources, and logs on test failure.

Test Data
Supported Discount Codes
Code	Discount
Edgewords	15%
2idiscount	25%
CSV Format
username,password,productName,coupon,firstName,lastName,address,address2,city,state,postcode,phone,expectedDiscountPercent
luis.hueso@2.com,luis.hueso,Polo,2idiscount,Luis,Hueso,Edgewords,2itesting,London,Camden,SE10 9LS,07956987456,25

Best Practices Used

Thread-safe design

Defensive exception handling

Clean separation of concerns (data / POM / tests)

Configurable waits & timeouts

Cross-browser compatibility

Data-driven for scalability

Troubleshooting

WebDriver session errors → check driver versions, running browsers, PATH.

Element not found → verify selectors, waits, page load.

Data errors → validate CSV format & credentials.

Contributing

Fork repo

Create feature branch

Add tests + docs

Submit PR

License

For educational & testing purposes.
